<?xml version="1.0" encoding="utf-8"?>
<view:XComposite xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx" 
				 xmlns:view="com.drawfx.view.*"
				 implements="com.drawfx.view.IBoundedView, com.drawfx.view.IConstrainedView"
				 top="{_constraints.top}"
				 left="{_constraints.left}"
				 bottom="{_constraints.bottom}"
				 right="{_constraints.right}"
				 horizontalCenter="{_constraints.horizontalCenter}"
				 verticalCenter="{_constraints.verticalCenter}"
				 x="{_bounds.x}"
				 y="{_bounds.y}"
				 z="{_bounds.z}"
				 depth="{_bounds.depth}"
				 width="{_bounds.width}" 
				 height="{_bounds.height}"
				 rotationX="{_bounds.rotationX}" 
				 rotationY="{_bounds.rotationY}" 
				 rotationZ="{_bounds.rotationZ}"
				 scaleX="{_bounds.scaleX}" 
				 scaleY="{_bounds.scaleY}" 
				 scaleZ="{_bounds.scaleZ}"
				 transformX="{_bounds.width / 2}"
				 transformY="{_bounds.height / 2}"
				 maintainProjectionCenter="true">
	
	<fx:Script>
		<![CDATA[
			/*
			Copyright (c) 2013 - 2015 Dave Jackson
			
			MIT License
			
			Permission is hereby granted, free of charge, to any person obtaining
			a copy of this software and associated documentation files (the
			"Software"), to deal in the Software without restriction, including
			without limitation the rights to use, copy, modify, merge, publish,
			distribute, sublicense, and/or sell copies of the Software, and to
			permit persons to whom the Software is furnished to do so, subject to
			the following conditions:
			
			The above copyright notice and this permission notice shall be
			included in all copies or substantial portions of the Software.
			
			THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
			EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
			MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
			NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
			LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
			OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
			WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
			*/		
			
			import com.anywarefx.model.IModel;
			import com.drawfx.fx.model.XBevelModel;
			import com.drawfx.fx.model.XBlurModel;
			import com.drawfx.fx.model.XDropShadowModel;
			import com.drawfx.fx.model.XGlowModel;
			import com.drawfx.model.XBoundsModel;
			import com.drawfx.model.XConstraintsModel;
			import com.drawfx.model.XShapeModel;
			
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			
			import assets.Icons;
			
			
			[Bindable] private var _isEmbedded:Boolean;
			[Bindable] private var _shape:XShapeModel;
			[Bindable] private var _bounds:XBoundsModel;
			[Bindable] private var _constraints:XConstraintsModel;
			[Bindable] private var _bevel:XBevelModel;
			[Bindable] private var _blur:XBlurModel;
			[Bindable] private var _dropShadow:XDropShadowModel;
			[Bindable] private var _glow:XGlowModel;
			
			
			public static function getShape(target:UIComponent):XShape
			{
				while (!(target is XShape) && target != null && target.parent != null)
				{
					target = target.parent as UIComponent;
				}
				return target as XShape;
			}
			
			
			override public function set model(value:IModel):void
			{
				super.model = value;
				_shape = value as XShapeModel;
				_bounds = _shape.bounds;
				_constraints = _shape.constraints;
				_bevel = _shape.fx.bevel;
				_blur = _shape.fx.blur;
				_dropShadow = _shape.fx.dropShadow;
				_glow = _shape.fx.glow;
			}
			
			
			
			public function get isEmbedded():Boolean
			{
				return _isEmbedded;
			}
			
			public function set isEmbedded(value:Boolean):void
			{
				_isEmbedded = value;
			}
			
			
			public function get resizeHandle():UIComponent
			{
				return _resizeHandle;
			}
			
			
			public function get bounds():XBoundsModel
			{
				return _bounds;
			}
			
			
			public function get constraints():XConstraintsModel
			{
				return _constraints;
			}
			
			
			public function get locks():ArrayCollection
			{
				return new ArrayCollection([_top, _left, _bottom, _right]);
			}
			
			
			override protected function stateChanged(oldState:String, newState:String, recursive:Boolean):void
			{
				super.stateChanged(oldState, newState, recursive);
				if (newState == "input")
				{
					_textBox.currentState = "input";
				}
				else
				{
					_textBox.currentState = "unselected";
				}
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
		<s:BevelFilter
			id="_bevelFx"
			angle="{_bevel.angle}"
			blurX="{_bevel.blurX}"
			blurY="{_bevel.blurY}"
			distance="{_bevel.distance}"
			highlightAlpha="{_bevel.highlightAlpha}"
			highlightColor="{_bevel.highlightColor}"
			quality="{_bevel.quality}"
			shadowAlpha="{_bevel.shadowAlpha}"
			shadowColor="{_bevel.shadowColor}"
			strength="{_bevel.strength}"/>
		
		<s:BlurFilter
			id="_blurFx"
			blurX="{_blur.blurX}"
			blurY="{_blur.blurY}"
			quality="{_blur.quality}"/>
		
		<s:DropShadowFilter 
			id="_dropShadowFx"
			alpha="{_dropShadow.alpha}"
			angle="{_dropShadow.angle}"
			blurX="{_dropShadow.blurX}"
			blurY="{_dropShadow.blurY}"
			color="{_dropShadow.color}"
			distance="{_dropShadow.distance}"
			inner="{_dropShadow.inner}"
			knockout="{_dropShadow.knockout}"
			quality="{_dropShadow.quality}"
			strength="{_dropShadow.strength}"/>
		
		<s:GlowFilter
			id="_glowFx"
			alpha="{_glow.alpha}"
			blurX="{_glow.blurX}"
			blurY="{_glow.blurY}"
			color="{_glow.color}"
			inner="{_glow.inner}"
			knockout="{_glow.knockout}"
			quality="{_glow.quality}"
			strength="{_glow.strength}"/>
		
	</fx:Declarations>
	
	<view:states>
		<s:State name="unselected"/>
		<s:State name="selected"/>
		<s:State name="input"/>
	</view:states>
	
	<view:layout>
		<s:BasicLayout/>
	</view:layout>
	
	<s:BorderContainer id="_container"
					   filters.selected="{[_bevelFx, _blurFx, _dropShadowFx, _glowFx]}"
					   filters.unselected="{[_bevelFx, _blurFx, _dropShadowFx, _glowFx]}"
					   filters.input="{[_bevelFx, _blurFx, _dropShadowFx, _glowFx]}"
					   
					   width="{_bounds.width}"
					   height="{_bounds.height}"
					   
					   backgroundColor="{_shape.fill.color}"
					   backgroundAlpha="{_shape.fill.alpha}"
					   blendMode="{_shape.fill.blendMode}"
					   
					   borderColor="{_shape.stroke.color}" 
					   borderAlpha="{_shape.stroke.alpha}"
					   borderStyle="{_shape.stroke.style}" 
					   borderWeight="{_shape.stroke.weight}" 
					   borderVisible="{_shape.border.visible}"
					   cornerRadius="{_shape.border.cornerRadius}"
					   dropShadowVisible="{_shape.border.dropShadowVisible}">
		
		<view:XTextBox id="_textBox" 
					   model="{_shape.textBox}"
					   isEmbedded="true"
					   width="{_bounds.width - _shape.stroke.weight * 2}" 
					   height="{_bounds.height - _shape.stroke.weight * 2}"
					   horizontalCenter="0" 
					   verticalCenter="0"/>
		
	</s:BorderContainer>
	
	
	<s:BorderContainer 
		id="_selectedBorder" 
		borderColor="0x70B2EE" 
		borderWeight="2"
		backgroundAlpha="0.0"
		width="{_bounds.width}"
		height="{_bounds.height}"
		depth="{(parent as XComposite).numElements}"
		visible="false" 
		visible.selected="true">
		
		<s:BorderContainer 
			id="_resizeHandle" 
			backgroundAlpha="1.0" 
			backgroundColor="0x70B2EE" 
			borderColor="0x70B2EE" 
			visible="false"
			visible.selected="true"
			x="{_bounds.width - 5 - 5}" 
			y="{_bounds.height - 5 - 5}" 
			width="11"
			height="11"/>
		
		<mx:Image 
			id="_top" 
			source="{isNaN(_constraints.top) ? Icons.Unlocked : Icons.Locked}"
			visible="false"
			x="{(_bounds.width / 2) - 5 - 5}" 
			y="{-8}" 
			width="12"
			height="12"/>
		
		<mx:Image 
			id="_left" 
			source="{isNaN(_constraints.left) ? Icons.Unlocked : Icons.Locked}"
			visible="false"
			x="{-8}" 
			y="{(_bounds.height / 2) - 5 - 5}" 
			width="12"
			height="12"/>
		
		<mx:Image 
			id="_bottom" 
			source="{isNaN(_constraints.bottom) ? Icons.Unlocked : Icons.Locked}"
			visible="false"
			x="{(_bounds.width / 2) - 5 - 5}" 
			y="{_bounds.height - 5 - 5}" 
			width="12"
			height="12"/>
		
		<mx:Image 
			id="_right" 
			source="{isNaN(_constraints.right) ? Icons.Unlocked : Icons.Locked}"
			visible="false"
			x="{_bounds.width - 5 - 5}" 
			y="{(_bounds.height / 2) - 5 - 4}" 
			width="12"
			height="12"/>
		
	</s:BorderContainer>
	
</view:XComposite>